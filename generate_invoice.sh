#!/bin/zsh

# How to Use the Script
# 1.  **Save the Script:** Save the code above as a file named `generate_invoice.sh` in the same directory as your `invoice.tex` file.
# 2.  **Make it Executable:** In your terminal, run:
#     ```bash
#     chmod +x generate_invoice.sh
#     ```
# 3.  **Run the Script:** Execute the script:
#     ```bash
#     ./generate_invoice.sh
#     ```
# 4.  **Verify:** Check the folder for the newly created `invoice.pdf` and verify that `invoice.tex` has been restored to its original template state.

# --- CONFIGURATION ---
TEX_FILE="invoice_template.tex"
INVOICE_DIR=~/invoice
PDF_FILE="$(date +"%Y%m%d")"
INVOICE_NUMBER=1

# ----------------------------------------------------------------------
# 1. NEW DATA ARRAY
# ----------------------------------------------------------------------
# This associative array maps the placeholder name (KEY) to the new value (VALUE).
# The KEY MUST match the LaTeX command name (e.g., InvoiceNumber).
# Update the VALUEs here for the current month's run.

declare -A NEW_DATA=(
    # LaTeX Command Name => New Value
    # Finds the current numeric InvoiceNumber value in the .tex file, increments it by 1, and assigns the new value to the variable. (Requires GNU grep for -P)
    ["InvoiceNumber"]=$(( $(perl -nle 'print $1 if /INVOICE_NUMBER=(\d+)/' "generate_invoice.sh") + 1 ))
    ["IssueDate"]=$(date +"%B %d, %Y")
    # Calculates the date for the first day of the current month.
    # It works by setting to the 1st day (1d) of the current month.
    ["PeriodStart"]=$(date -v 1d +"%B %d")
    # Calculates the date for the last day of the current month.
    # It works by chaining adjustments: +1 month, set day to the 1st, then -1 day.
    ["PeriodEnd"]=$(date -v+1m -v1d -v-1d +"%B %d")
    ["Year"]=$(date +%Y)
    # Add any other variables defined with \newcommand here
    # Example: ["BillToName"]="Acme Corp"
)

# ----------------------------------------------------------------------
# --- STEP 1: PREPARE AND UPDATE THE FILE ---
# ----------------------------------------------------------------------

echo "Starting invoice generation..."

# Loop through the associative array to update \newcommand fields
for KEY in "${(@k)NEW_DATA}"; do
    VALUE="${NEW_DATA[$KEY]}"
    
    echo "Updating [$KEY] to: $VALUE"
    
    # sed command to find: \newcommand{\KEY}{...} and replace it with: \newcommand{\KEY}{VALUE}
    # -i '' is needed for in-place editing on macOS
    # Finds the entire line defining the LaTeX command $KEY and replaces its existing value 
    # (the text between the final braces) with the new variable $VALUE.
    # The capturing groups (\1 and \2) preserve the start and end of the command structure.
    sed -i '' -E "s/(\\\\newcommand{\\\\$KEY}{).*(})/\1$VALUE\2/" "$TEX_FILE"
done

# ----------------------------------------------------------------------
# --- STEP 2: COMPILE THE PDF ---
# ----------------------------------------------------------------------

echo "Compiling LaTeX file (Pass 1)..."
# Suppress compiler output to keep the terminal clean
pdflatex -jobname="$PDF_FILE" "$TEX_FILE" > /dev/null

echo "Compiling LaTeX file (Pass 2)..."
pdflatex -jobname="$PDF_FILE" "$TEX_FILE" > /dev/null

# Check if the PDF was created successfully
if [ -f "$PDF_FILE.pdf" ]; then
    mv $PDF_FILE.pdf "$INVOICE_DIR"
    echo "SUCCESS: Invoice ${NEW_DATA[InvoiceNumber]} generated as $PDF_FILE.pdf"
else
    echo "ERROR: PDF compilation failed. Check the pdflatex log files."
fi

# ----------------------------------------------------------------------
# --- STEP 3: CLEAN UP (Restore the template and remove temp files) ---
# ----------------------------------------------------------------------

echo "Cleaning up files..."

# Remove the auxiliary files generated by pdflatex
rm -f *.aux *.log

echo "Done."
# Notification
osascript -e 'display notification "Invoice generated." with title "Invoice" sound name "Blow"'
